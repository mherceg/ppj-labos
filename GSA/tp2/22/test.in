KR_INT 1 int
IDN 1 f
L_ZAGRADA 1 (
KR_INT 1 int
IDN 1 x
D_ZAGRADA 1 )
L_VIT_ZAGRADA 1 {
KR_RETURN 2 return
IDN 2 x
MINUS 2 -
BROJ 2 15
TOCKAZAREZ 2 ;
D_VIT_ZAGRADA 3 }
KR_INT 4 int
IDN 4 main
L_ZAGRADA 4 (
KR_VOID 4 void
D_ZAGRADA 4 )
L_VIT_ZAGRADA 4 {
KR_INT 5 int
IDN 5 x
OP_PRIDRUZI 5 =
BROJ 5 1
TOCKAZAREZ 5 ;
KR_INT 6 int
IDN 6 y
OP_PRIDRUZI 6 =
BROJ 6 2
TOCKAZAREZ 6 ;
KR_INT 7 int
IDN 7 z
OP_PRIDRUZI 7 =
BROJ 7 4
TOCKAZAREZ 7 ;
KR_INT 8 int
IDN 8 w
OP_PRIDRUZI 8 =
BROJ 8 8
TOCKAZAREZ 8 ;
KR_INT 9 int
IDN 9 a
OP_PRIDRUZI 9 =
BROJ 9 16
TOCKAZAREZ 9 ;
KR_INT 10 int
IDN 10 b
OP_PRIDRUZI 10 =
BROJ 10 32
TOCKAZAREZ 10 ;
KR_INT 11 int
IDN 11 c
OP_PRIDRUZI 11 =
BROJ 11 64
TOCKAZAREZ 11 ;
KR_RETURN 13 return
L_ZAGRADA 13 (
IDN 13 a
PLUS 13 +
IDN 13 b
D_ZAGRADA 13 )
PLUS 13 +
L_ZAGRADA 13 (
IDN 13 x
PLUS 13 +
IDN 13 y
D_ZAGRADA 13 )
PLUS 13 +
IDN 13 z
PLUS 13 +
IDN 13 w
PLUS 13 +
IDN 13 c
PLUS 13 +
L_ZAGRADA 13 (
IDN 13 a
MINUS 13 -
IDN 13 z
MINUS 13 -
IDN 13 w
MINUS 13 -
IDN 13 a
MINUS 13 -
IDN 13 b
D_ZAGRADA 13 )
PLUS 13 +
IDN 13 f
L_ZAGRADA 13 (
BROJ 13 1
D_ZAGRADA 13 )
PLUS 13 +
IDN 13 f
L_ZAGRADA 13 (
BROJ 13 5
D_ZAGRADA 13 )
PLUS 13 +
IDN 13 f
L_ZAGRADA 13 (
BROJ 13 15
D_ZAGRADA 13 )
TOCKAZAREZ 13 ;
D_VIT_ZAGRADA 14 }
