KR_INT 1 int
IDN 1 c
L_ZAGRADA 1 (
KR_INT 1 int
IDN 1 w
D_ZAGRADA 1 )
L_VIT_ZAGRADA 1 {
KR_RETURN 2 return
IDN 2 w
TOCKAZAREZ 2 ;
D_VIT_ZAGRADA 3 }
KR_INT 4 int
IDN 4 b
L_ZAGRADA 4 (
KR_INT 4 int
IDN 4 z
D_ZAGRADA 4 )
L_VIT_ZAGRADA 4 {
KR_RETURN 5 return
IDN 5 z
PLUS 5 +
IDN 5 c
L_ZAGRADA 5 (
IDN 5 z
PLUS 5 +
BROJ 5 1
D_ZAGRADA 5 )
TOCKAZAREZ 5 ;
D_VIT_ZAGRADA 6 }
KR_INT 7 int
IDN 7 a
L_ZAGRADA 7 (
KR_INT 7 int
IDN 7 y
D_ZAGRADA 7 )
L_VIT_ZAGRADA 7 {
KR_RETURN 8 return
IDN 8 y
PLUS 8 +
IDN 8 b
L_ZAGRADA 8 (
IDN 8 y
PLUS 8 +
BROJ 8 1
D_ZAGRADA 8 )
TOCKAZAREZ 8 ;
D_VIT_ZAGRADA 9 }
KR_INT 10 int
IDN 10 f
L_ZAGRADA 10 (
KR_INT 10 int
IDN 10 x
D_ZAGRADA 10 )
L_VIT_ZAGRADA 10 {
KR_RETURN 11 return
IDN 11 a
L_ZAGRADA 11 (
IDN 11 x
PLUS 11 +
BROJ 11 1
D_ZAGRADA 11 )
PLUS 11 +
IDN 11 x
TOCKAZAREZ 11 ;
D_VIT_ZAGRADA 12 }
KR_INT 13 int
IDN 13 main
L_ZAGRADA 13 (
KR_VOID 13 void
D_ZAGRADA 13 )
L_VIT_ZAGRADA 13 {
KR_RETURN 14 return
IDN 14 f
L_ZAGRADA 14 (
BROJ 14 1
D_ZAGRADA 14 )
TOCKAZAREZ 14 ;
D_VIT_ZAGRADA 15 }
